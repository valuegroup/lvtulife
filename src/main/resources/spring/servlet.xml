<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
					http://www.springframework.org/schema/beans/spring-beans.xsd
					http://www.springframework.org/schema/mvc
					http://www.springframework.org/schema/mvc/spring-mvc.xsd
					http://www.springframework.org/schema/context
					http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller(service 层和Controller 层需独立开启)-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--<context:annotation-config/>-->

    <!--自动扫描 base-package为需要扫描的包（含所有子包） @Controller用于标注控制层组件（如struts中的action）-->
    <context:component-scan base-package="com.lvtulife.*.controller" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <ref bean="oAuth2AccessTokenHttpMessageConverter"/>
            <ref bean="formOAuth2ExceptionHttpMessageConverter"/>
            <ref bean="oauth2ExceptionMessageConverter"/>
            <ref bean="fastJsonHttpMessageConverter"/><!--fastjson的 转换器-->
            <!--<ref bean="stringHttpMessageConverter" />-->
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 对静态资源文件的访问  方案一 （二选一） -->
    <mvc:default-servlet-handler/>
    <!-- 对静态资源文件的访问  方案二 （二选一）-->
    <!--<mvc:resources mapping="/images/**" location="/images/" cache-period="31556926"/>
    <mvc:resources mapping="/js/**" location="/js/" cache-period="31556926"/>
    <mvc:resources mapping="/css/**" location="/css/" cache-period="31556926"/>-->


    <bean id="oAuth2AccessTokenHttpMessageConverter" class="com.lvtulife.system.component.oauth2.OAuth2AccessTokenHttpMessageConverter"/>
    <bean id="formOAuth2ExceptionHttpMessageConverter" class="org.springframework.security.oauth2.http.converter.FormOAuth2ExceptionHttpMessageConverter"/>
    <bean id="oauth2ExceptionMessageConverter" class="com.lvtulife.system.component.oauth2.Oauth2ExceptionMessageConverter"/>

    <bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
        <!-- supportedMediaTypes增加[text/html;charset=UTF-8]值,是为了兼容IE6否则[application/json]值在IE6中会导致弹出对话框询问是否保存文件,而firefox等高级浏览器会正常打印json字符串 -->
        <!-- 若像下面这样给supportedMediaTypes属性赋两个值[text/html;charset=UTF-8]和[application/json],则[application/json]是无效的因为此时应答给浏览器(或者说请求方)的Content-Type头信息都是[text/html;charset=UTF-8],所以给它一个值就行了,如果给supportedMediaTypes的值为[application/json],则应答给浏览器的Content-Type头信息就是[application/json;charset=UTF-8] -->
        <property name="supportedMediaTypes">
            <list>
                <!-- 这里顺序不能反，一定先写text/html,不然ie下出现下载提示 -->
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
        <property name="features">
            <array>
                <!-- 用来控制json序列化输出时的一些额外属性,比如说该字段是否输出、输出时key使用单引号还是双引号、key不使用任何引号等等 -->
                <!-- WriteMapNullValue 是否输出值为null的字段,默认为false -->
                <!-- WriteNullNumberAsZero 数值字段如果为null,输出为0,而非null -->
                <!-- WriteNullBooleanAsFalse Boolean字段如果为null,输出为false,而非null -->

                <!-- QuoteFieldNames 输出key时是否使用双引号,默认为true -->
                <value>QuoteFieldNames</value>
                <!-- <value>WriteMapNullValue</value> 不建议启用,当类型为Integer或者Object时会直接输入null,不利于前端页面判断 -->
                <value>WriteDateUseDateFormat</value>
                <!-- WriteNullStringAsEmpty 字符类型字段如果为null,输出为"",而非null -->
                <value>WriteNullStringAsEmpty</value>
                <!-- WriteNullListAsEmpty List字段如果为null,输出为[],而非null -->
                <value>WriteNullListAsEmpty</value>
                <value>DisableCircularReferenceDetect</value>
            </array>
        </property>
    </bean>


    <!--<bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>-->


    <!--
    	模型解析，在请求时为模型视图名称添加前后缀
    	比如在controller类中需要请求/WEB-INF/page/index.jsp文件，直接写index就可以了
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/views/"/> <!-- 视图文件的前缀 -->
        <property name="suffix" value=".jsp"/> <!-- 视图文件的后缀名 -->
        <!-- view是用什么显示，这里是jsp，还可以用velocity之类的 -->
        <!--<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>-->
    </bean>


    <!-- 支持上传文件 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="maxUploadSize" value="32505856"/><!-- 上传文件大小限制为31M，31*1024*1024 -->
        <property name="maxInMemorySize" value="4096"/>
    </bean>

    <!--***********************************-->
    <!--**************自定义***************-->
    <!--***********************************-->
    <!--spring 上下文工具类-->
    <bean class="com.lvtulife.base.utils.SpringContextUtil"/>

    <!-- Spring 启动完成的监听类 放在最后 -->
    <bean class="com.lvtulife.base.listener.StartListener"/>
</beans>